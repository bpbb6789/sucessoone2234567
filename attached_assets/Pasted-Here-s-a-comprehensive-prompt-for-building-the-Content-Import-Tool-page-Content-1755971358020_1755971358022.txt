Here's a comprehensive prompt for building the **Content Import Tool** page:

---

## ðŸŽ¯ Content Import Tool - Development Brief

**Objective:** Build a dedicated web page that allows creators to seamlessly import/upload content to IPFS and prepare it for tokenization within their channel coin ecosystem.

### ðŸ“‹ Page Requirements

**URL Structure:**
- `/dashboard/import` or `/channels/{channelId}/import`
- Accessible from Channel Manager via "Import Content" button

**Core Functionality:**
1. **Content Type Selection** - Radio/grid selection for Reel, Podcast, Image, Post, Event
2. **Dual Import Methods:**
   - File upload (drag/drop + browse button)
   - URL import (YouTube, TikTok, Spotify, RSS feeds)
3. **IPFS Integration** - Auto-upload to Pinata with progress tracking
4. **Metadata Management** - JSON wrapping with channel coin links
5. **Status Tracking** - Ready â†’ Tokenizing â†’ Tokenized states

### ðŸŽ¨ UI/UX Specifications

**Layout:**
- Full-page interface (not modal)
- Two-column: Import tools (left 2/3) + File manager sidebar (right 1/3)
- Sticky header with page title + import stats

**Import Section:**
- Content type selector (visual cards with icons)
- Tabbed interface: "Upload Files" vs "Import from URL"
- Large drag/drop zone with file type indicators
- URL input with platform detection (YouTube/TikTok/Spotify logos)
- Progress bar with steps: "Uploading â†’ Creating metadata â†’ Finalizing on IPFS"

**File Manager Sidebar:**
- Real-time list of imported content
- Status badges (Ready/Tokenizing/Tokenized)
- IPFS CID display (truncated)
- Quick "Tokenize" buttons
- Remove/delete options
- Stats summary box

### ðŸ”§ Technical Implementation

**Frontend Logic:**
```javascript
// Core functions needed:
- handleFileUpload(files) â†’ Pinata upload â†’ metadata creation
- handleUrlImport(url) â†’ backend fetch â†’ IPFS upload
- updateFileStatus(fileId, status) â†’ UI state management
- tokenizeContent(fileId) â†’ Zora mint trigger
```

**API Endpoints Required:**
- `POST /api/content/upload` - File upload to Pinata
- `POST /api/content/import` - URL import processing  
- `GET /api/content/{channelId}` - Fetch imported content
- `POST /api/content/{contentId}/tokenize` - Mint as NFT

**Database Schema:**
```sql
Content {
  id, channelId, ipfsCid, mediaCid, type, title, 
  description, status, createdAt, tokenizedAt
}
```

### âš¡ User Experience Flow

1. **Navigate to page** â†’ See content type selection
2. **Choose content type** â†’ Reel/Podcast/Image/etc
3. **Import method** â†’ Upload files OR paste URL
4. **Auto-processing** â†’ IPFS upload + metadata creation
5. **File appears in sidebar** â†’ "Ready to tokenize" status
6. **Optional tokenization** â†’ One-click mint to blockchain

### ðŸŽ¯ Success Metrics

- **Friction-free import** - No crypto knowledge required
- **Clear progress feedback** - Users know what's happening
- **Batch operations** - Handle multiple files efficiently  
- **Status transparency** - Always know tokenization state
- **Platform integration** - Import from existing social accounts

### ðŸš€ Technical Integrations

**Required Services:**
- **Pinata API** - IPFS storage
- **Zora SDK** - NFT minting
- **File processing** - Video/audio thumbnail generation
- **URL fetching** - YouTube/TikTok/Spotify content extraction

**Error Handling:**
- Upload failures with retry options
- Invalid URL format detection
- IPFS timeout handling
- Metadata corruption recovery

---

**Key Design Principle:** Make Web3 content management feel like familiar Web2 tools (Google Drive, Dropbox) while handling all the blockchain complexity behind the scenes.

This becomes the **content onboarding gateway** that transforms any creator's existing content into tokenizable, IPFS-stored assets ready for their channel coin ecosystem.